// Mot-cl√© var

/*
  - "var" a une port√©e de fonction :
    - soit une variable est d√©finie dans le contexte global, auquel cas elle est accessible partout
    - soit une variable est d√©finie √† l'int√©rieur d'une function, auquel cas elle est "locale" √† la fonction
  - les variables d√©clar√©es avec "var" sont hiss√©es ("hoisted");
  - red√©claration autoris√©e
*/

var couleur = "bleu ciel"; // port√©e globale
var couleur = "rouge";

function obtenirCouleur() {
  var couleur = "rouge fonc√©"; // port√©e locale
  return couleur;
}

console.log(obtenirCouleur()); // "rouge fonc√©"
console.log(couleur); // "bleu ciel"

/*
  hoisting "hissage / remont√©e"
*/

function obtenirCouleur2() {
  console.log(couleur); // undefined
  var couleur = "rose p√¢le";
  return couleur;
}

// C'est comme si JavaScript interpr√©tait notre code comme suit :
function obtenirCouleur2EXPLICATION() {
  var couleur; // initialis√©e par d√©faut √† undefined, logique !
  console.log(couleur); // undefined
  couleur = "rose p√¢le";
  return couleur;
}

console.log(obtenirCouleur2());

/*
  Le mot-cl√© "let" :
  - port√©e bloc : if...else, for, while, try...catch, switch
    - d√©clar√©e dans le contexte globale, ma variable est globale
    - d√©clar√©e dans une fonction, ma variable est accessible partout √† l'int√©rieur de ma fonction
    - d√©clar√©e dans un bloc, ma variable est limit√©e √† ce bloc
  - pas de "hoisting" (pas de hissage des d√©clarations)
  - pas de red√©claration possible
*/

let maVariableGlobale = "coucou"; // variable globale

function obtenirCouleur3(sombre) {
  console.log("couleur3", couleur3);
  let couleur3;
  if (sombre) {
    couleur3 = "noir";
  } else {
    couleur3 = "blanc";
  }
  return couleur3;
}

console.log(
  "üöÄ ~ file: 01-let_const.js ~ line 57 ~ obtenirCouleur3()",
  obtenirCouleur3(true)
);

/*
  Le mot-cl√© "const" :
  - tout pareil que "let"
  - ...sauf qu'une variable d√©clar√©e avec const ne peut pas √™tre r√©assign√©e
*/

// ATTENTION, r√©assignation interdite
const nombreDeJoueurs = 8;
nombreDeJoueurs = 4;

// ...ici, on a le droit de modifier une propri√©t√© d'un objet d√©clar√© avec const (la r√©f√©rence √† l'objet est conserv√©e).
const jeu = {
  nombreDeJoueurs: 8,
};
jeu.nombreDeJoueurs = 16;

// CONSEIL PRATIQUE :
// Toujours d√©clarer les variables avec "const" par d√©faut SAUF si la valeur de la variable est amen√©e √† changer.
